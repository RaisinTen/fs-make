# meta

TARGET := fs-make
VERSION := 1.0.0

# dirs

# in termux, PREFIX points to /data/data/com.termux/files/usr/
# else it is empty
PREFIX := $(shell echo ${PREFIX})
# by default installs to /usr/local/bin
BIN := /usr/local/bin
ifneq ($(PREFIX),)
	# in linux-android, ${PREFIX}/usr/local/bin
	# doesn't exist; so instead install it to
	# ${PREFIX}/usr/bin/
	BIN := $(PREFIX)/../usr/bin
endif

INCLUDES := ./includes
SRC := ./src

# files

YFILES := $(wildcard $(SRC)/*.y)

TABFILES := \
	$(YFILES:.y=.tab.c) \
	$(YFILES:.y=.tab.h)
TABFILES := $(patsubst $(SRC)/%, %, $(TABFILES))

YYFILES := lex.yy.c

CFILES := \
	$(wildcard $(SRC)/*.c) \
	$(YFILES:.y=.tab.c) \
	$(YYFILES)

CPPFILES := $(wildcard $(SRC)/*.cpp)

OBJECTS := \
	$(CFILES:.c=.o) \
	$(CPPFILES:.cpp=.o)
OBJECTS := $(patsubst $(SRC)/%, %, $(OBJECTS))

DEPS := $(OBJECTS:.o=.d)

.PHONY := all clean install uninstall

# colours

PRE := \033[

NC := $(PRE)0m
GREEN := $(PRE)1;32m
YELLOW := $(PRE)1;33m
BLUE := $(PRE)1;36m
RED := $(PRE)1;31m

# tools

# generated by the configure script
-include tools

RM := rm
IN := install

# flags

DEFINES := -D TARGET=\"$(TARGET)\" -D VERSION=\"$(VERSION)\"

CFLAGS := $(DEFINES) -I $(INCLUDES) -Wall -Wextra -Wpedantic -g -MMD -MP -c
FLEXFLAGS := 
BISONFLAGS := -d
RMFLAGS := -f
INFLAGS := 
TREEFLAGS := -a

# recipes

all: $(TARGET)
	@echo "$(GREEN)Build complete!$(NC)\n"
	@echo "$(BLUE)Now, install $(YELLOW)$(TARGET)$(BLUE) with: $(YELLOW)make install$(NC)"

uninstall:
	@echo "$(RED)... uninstalling $(YELLOW)$(TARGET)$(RED) ...$(NC)\n"
	$(SUDO) $(RM) $(RMFLAGS) $(BIN)/$(TARGET)
	@echo ""
	@echo "$(RED)Uninstallation complete. :($(NC)\n"
	@echo "$(BLUE)Now, install $(YELLOW)$(TARGET)$(BLUE) with: $(YELLOW)make install$(NC)"

install:
	@echo "$(GREEN)... installing $(YELLOW)$(TARGET)$(GREEN) ...$(NC)\n"
	$(SUDO) $(IN) $(INFLAGS) $(TARGET) $(BIN)/$(TARGET)
	@echo ""
	@echo "$(GREEN)Installation complete!$(NC)\n"
	@echo "$(BLUE)Now, run $(YELLOW)$(TARGET)$(BLUE) with: $(YELLOW)$(TARGET)$(NC)"

$(TARGET): $(OBJECTS)
	@echo "$(BLUE)... making $(YELLOW)$@ $(BLUE)...$(NC)\n"
	$(CPP) -o $(TARGET) $^
	@echo ""

%.o: $(SRC)/%.c
	@echo "$(BLUE)... making $(YELLOW)$@ $(BLUE)...$(NC)\n"
	$(CC) $(CFLAGS) $<
	@echo ""

%.o: %.c
	@echo "$(BLUE)... making $(YELLOW)$@ $(BLUE)...$(NC)\n"
	$(CC) $(CFLAGS) $<
	@echo ""

%.o: $(SRC)/%.cpp
	@echo "$(BLUE)... making $(YELLOW)$@ $(BLUE)...$(NC)\n"
	$(CPP) $(CFLAGS) $<
	@echo ""

lex.yy.c: $(SRC)/lexer.l
	@echo "$(BLUE)... making $(YELLOW)$@ $(BLUE)...$(NC)\n"
	$(FLEX) $(FLEXFLAGS) $<
	@echo ""

grammar.tab.c grammar.tab.h: $(SRC)/grammar.y
	@echo "$(BLUE)... making $(YELLOW)grammar.tab.c $(BLUE)and $(YELLOW)grammar.tab.h $(BLUE)...$(NC)\n"
	$(BISON) $(BISONFLAGS) $<
	@echo ""

clean:
	@echo "$(RED)... cleaning up ...$(NC)\n"
	$(RM) $(RMFLAGS) $(OBJECTS) $(DEPS) $(YYFILES) $(TABFILES) $(TARGET)
	@echo ""
	@echo "$(RED)Cleaning complete!$(NC)\n"
	@echo "$(BLUE)Now, build $(YELLOW)$(TARGET)$(BLUE) with: $(YELLOW)make$(NC)"

# from the generated dependency files

-include $(DEPS)
